package com.nquantum.module.exploit;

import cf.nquan.util.Strings;
import cf.nquan.util.Timer;
import com.nquantum.Asyncware;
import com.nquantum.event.EventTarget;
import com.nquantum.event.impl.EventPreMotionUpdate;
import com.nquantum.event.impl.EventSendPacket;
import com.nquantum.event.impl.EventUpdate;
import com.nquantum.module.Category;
import com.nquantum.module.Module;
import nig.hero.settings.Setting;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;

import java.util.ArrayList;
import java.util.Queue;
import java.util.SplittableRandom;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;

public class Disabler extends Module {

    public static Timer timer = new Timer();
    public static String mode;
    ArrayList<Packet> transactions = new ArrayList<Packet>();
    public ArrayList<Packet> delayedtransactions;
    public ArrayList<Packet> delayedtransactions2;
    public ArrayList<Packet> agcpingspoof;
    public ArrayList<Packet> theresasparkinmyass;
    public ArrayList<Packet> verusFlyTrap;
    public ArrayList<Packet> fuck;
    public int avticksexisted;
    public int keepalivecounter;
    public int confirmtransactioncounter;
    public int agckeepalivecounter;

    private final int[] counter = new int[8];
    private static final CopyOnWriteArrayList<C0FPacketConfirmTransaction> bypassList = new  CopyOnWriteArrayList<>();
    private static final CopyOnWriteArrayList<C0CPacketInput> bypassList2 = new  CopyOnWriteArrayList<>();
    private static final SplittableRandom random = new SplittableRandom();
    private final Queue<Packet> packetQueue = new ConcurrentLinkedQueue();
    private int current;
    ArrayList<Packet> keepAlives = new ArrayList<Packet>();


    public Disabler(){
        super("Disabler", 0, Category.EXPLOIT);
        ArrayList<String> modes = new ArrayList<>();
        modes.add("Verus");
        modes.add("Verus Combat");
        modes.add("Washdog");
        modes.add("C0F Sexing");
        modes.add("Anti Nigger");
        modes.add("PingSpoof 350");

        Asyncware.instance.settingsManager.rSetting(new Setting("Disabler Mode", this, "Verus", modes));
    }

    @Override
    public void setup(){


    }

    @Override
    public void onEnable() {
        super.onEnable();

    }

    @EventTarget
    public void onPacket(EventSendPacket e) {
        if (mode.equalsIgnoreCase("Verus")) {
            if (((EventSendPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                this.packetQueue.add(((EventSendPacket) e).getPacket());
                e.setCancelled(true);
            }
            if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted <= 20) {
                this.packetQueue.clear();
                timer.reset();
            }

            if (((EventSendPacket) e).getPacket() instanceof C0CPacketInput) {
                C13PacketPlayerAbilities packetPlayerAbilities = new C13PacketPlayerAbilities();
                packetPlayerAbilities.setAllowFlying(true);


            }
        }

    }
    @EventTarget
    public void onUpdate(EventUpdate ok){
        this.setDisplayName("Disabler \u00A77" + Strings.capitalizeOnlyFirstLetter(mode));
        mode = Asyncware.instance.settingsManager.getSettingByName("Disabler Mode").getValString();
        if(mode.equalsIgnoreCase("Verus")){
            if (this.mc.thePlayer.ticksExisted % 4 == 0) {}
            if (this.mc.thePlayer.ticksExisted > 25 && this.timer.hasTimeElapsed((long) 500.0f, true)) {
                if (!this.packetQueue.isEmpty()) {
                    mc.thePlayer.sendQueue.addToSendQueue(this.packetQueue.poll());
                }
                this.timer.reset();
            }
        }
    }

    @EventTarget
    public void onSendPacket(EventSendPacket nigga) {
        mode = Asyncware.instance.settingsManager.getSettingByName("Disabler Mode").getValString();
        if (mode.equalsIgnoreCase("Verus"))
            if (nigga.getPacket() instanceof C00PacketKeepAlive) {
                if (timer.hasTimeElapsed(10L, true)) {
                    nigga.setCancelled(true);
                }
            }
    }


    @EventTarget
    public void onPreMotionUpdate(EventPreMotionUpdate niga){
        if(mode.equalsIgnoreCase("Verus"))
        if(mc.thePlayer.ticksExisted < 5) {
            current = 0;
            bypassList.clear();
        }
        int pies = 0;
        if(mc.thePlayer.ticksExisted % 22 == 0) {
            current++;
            pies++;
            pies = random.nextInt(140);
        }
        if(mc.thePlayer.ticksExisted % 100 == 0 && bypassList.size() > 0 && (bypassList.size() - 1) > current) {
            mc.thePlayer.sendQueue.addToSendQueue(bypassList.get(++current));
        }
        if(mc.thePlayer.ticksExisted % 1000 == 0) {
            current = 0;
            bypassList.clear();
        }
        int bypass = 120 + random.nextInt(40);
        if(mc.thePlayer.ticksExisted % 22 == 0) {

    }
}
}

